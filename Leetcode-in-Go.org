#+TITLE: Solving Leetcode problems in Golang

* TODO 4. Median of Two Sorted Arrays   :Hard:
:PROPERTIES:
:CREATED:  <2023-04-01 Sat>
:END:

[[https://leetcode.com/problems/median-of-two-sorted-arrays/description/][Median of Two Sorted Arrays - LeetCode]]

Given two sorted arrays nums1 and nums2 of size m and n respectively,
return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.

Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.

Constraints:

- nums1.length = m
- nums2.length = n
- 0 <= m <= 1000
- 0 <= n <= 1000
- 1 <= m + n <= 2000
- -106 <= nums1[i], nums2[i] <= 106


** Naive solution with O(m+n) complexity
Join arrays preserving the order, then calculate the median.
Complexity is O(m+n) as we loop over both arrays once.

Snippet at ~/Developer/src/github.com/velppa/go-playground/at-2023-04-01-000716/snippet.go.

https://leetcode.com/problems/median-of-two-sorted-arrays/submissions/925598775/

Apr 01, 2023 00:22
Runtime 16 ms Beats 54.10%
Memory 5.6 MB Beats 40.69%


#+begin_src go
// -*- mode:go;mode:go-playground -*-
// snippet of code @ 2023-04-01 00:07:16
package main

import (
	"fmt"
)

// Merge merges two sorted slices into final sorted slice.
func merge(s1, s2 []int) []int {
	result := make([]int, len(s1)+len(s2))
	i1, i2 := 0, 0 // current pointers to position in s1 and s2
	for i := range result {
		// checking if pointers went beyond the limits
		if i1 >= len(s1) {
			result[i] = s2[i2]
			i2++
			continue
		}
		if i2 >= len(s2) {
			result[i] = s1[i1]
			i1++
			continue
		}
		// picking the least value and advancing the pointer
		if s1[i1] < s2[i2] {
			result[i] = s1[i1]
			i1++
		} else {
			result[i] = s2[i2]
			i2++
		}
	}
	return result
}

// Median calculates median of a sorted slice.
func median(s []int) float64 {
	if len(s)%2 == 0 { // length is even
		return float64(float64(s[len(s)/2]+s[len(s)/2-1]) / 2)
	}
	return float64(s[len(s)/2])
}

func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {
	return median(merge(nums1, nums2))
}

func main() {
	s1 := []int{1, 2}
	s2 := []int{3, 4}
	merged := merge(s1, s2)
	median := median(merged)
	fmt.Println("Results:", merged, " ", median)
}
#+end_src

#+RESULTS:
: Hello world

* DONE 8. String to Integer (atoi)                                   :Medium:
CLOSED: [2021-07-11 Sun 19:48]
<2021-07-11 Sun>
https://leetcode.com/problems/string-to-integer-atoi/

#+begin_src go
func powerOfTen(n int) int {
    result := 1
    for i:=1; i<=n; i++ {
        result *= 10
    }
    return result
}

func myAtoi(s string) int {

    digits := make([]uint8, 0, 10)
    var multiplier int64 = 0
    var isInsideNumber = false
    var isLeadingZero = true

    for _, c := range s {
        if c == 0x20 && !isInsideNumber { // space
            continue
        }
        if multiplier == 0 && !isInsideNumber {
            isInsideNumber = true
            if c == 0x2D { // minus
                multiplier = -1
                continue
            } else if c == 0x2B { // plus
                multiplier = 1
                continue
            }
        }
        if c >= 0x30 && c <= 0x39 {
            isInsideNumber = true
            if c == 0x30 && isLeadingZero {
                continue
            }
            isLeadingZero = false
            digits = append(digits, uint8(c-0x30))
            if len(digits) > 10 {
                break
            }
            continue
        }
        break
    }

    if multiplier == 0 {
        multiplier = 1
    }

    var result int64
    for i:=len(digits)-1; i>=0; i-- {
        digit := digits[i]
        result += int64(digit)*int64(powerOfTen(len(digits)-1-i))

            if multiplier*result < -2147483648 {
                return -2147483648
            }
            if multiplier*result > 2147483647 {
                return 2147483647
            }
    }

    return int(multiplier*result)
}
#+end_src

* TODO 11. Container With Most Water                                 :Medium:
<2021-10-24 Sun>
https://leetcode.com/problems/container-with-most-water/

#+begin_quote
Given n non-negative integers a1, a2, ..., an , where each represents
a point at coordinate (i, ai). n vertical lines are drawn such that
the two endpoints of the line i is at (i, ai) and (i, 0). Find two
lines, which, together with the x-axis forms a container, such that
the container contains the most water.

Notice that you may not slant the container.
#+end_quote

1. Brute-force approach
   - Generate all possible pairs of vertical lines
   - For each pair calculate the amount of water it would hold, as up
     to minimum height of pairs
     - Not all pairs form a valid container - if there exists intermediate vertical line
       with height greater than lowest boundary, then the pair is invalid.
2. Instead of all-possible pairs, generate valid pairs
   - Pick a left boundary line i
   - Iterate from i
   - On each iteration j, check if jth line is greater than all between i and j
   - If it's true, add pair as valid, otherwise continue to next j
   - Increase i
   - For each valid pair, calculate volume
   - Pick a pair with biggest volume

#+begin_src go

type Pair struct {
	Left, Right int
}

func buildValidPairs(height []int) []Pair {
	if len(height) == 0 {
		return []Pair{}
	}
	pairs := make([]Pair, 0, len(height))
	for i, left := range height {
		for j, right := range height[i:] {

		}

	}

	return pairs
}


func maxArea(height []int) int {

}
#+end_src

Эта задача всплывала в подкасте Мы обречены в выпуске с Бангалором,
Тонским и Натальей Давыдовой.

* DONE 27. Remove Element                                              :Easy:
<2021-07-10 Sat>

https://leetcode.com/problems/remove-element/

* DONE 35. Search Insert position                                      :Easy:
<2021-07-10 Sat>

https://leetcode.com/problems/search-insert-position/

#+begin_src go
func searchInsert(nums []int, target int) int {

    var iteration func(first, last int) int
    iteration = func(first, last int) int {
        var firstValue, lastValue = nums[first], nums[last]

        if target == firstValue {
            return first
        }
        if target == lastValue {
            return last
        }

        if last-first <= 1 {
            if target < firstValue {
                return 0
            }
            if target < lastValue {
                return last
            }
            return last+1
        }
        // firstValue < target < lastValue
        middle := first+(last-first)/2
        middleValue := nums[middle]

        if target == middleValue {
            return middle
        }

        if target < middleValue {
            return iteration(first, middle)
        }
        if target > middleValue {
            return iteration(middle, last)
        }
        return -1
    }
    return iteration(0, len(nums)-1)
}
#+end_src

* DONE 46. Permutations                                              :Medium:
CLOSED: [2021-07-26 Mon 10:46]
<2021-07-25 Sun>

Heap's algorithm generates all possible permutations of n objects. It
was first proposed by B. R. Heap in 1963.

#+begin_src python :results verbatim
output = []
a = [1, 2, 3]
n = len(a)

def heapPermutation(a, size):

    # if size becomes 1 then prints the obtained
    # permutation
    if size == 1:
        output.append(a)
        return

    for i in range(size):

        # if size is odd, swap 0th i.e (first)
        # and (size-1)th i.e (last) element
        # else If size is even, swap ith
        # and (size-1)th i.e (last) element
        idx = 0 if (size & 1) else i
        a[idx], a[size-1] = a[size-1], a[idx]
        heapPermutation(a, size-1)

# Driver code
heapPermutation(a, n)
return output

#+end_src

#+RESULTS:
: [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]


#+begin_src go
func heapPermutations(data []int) [][]int {
	permutations := [][]int{}
	var generate func(int, []int)

	generate = func(n int, arr []int) {
		if n == 1 {
			A := make([]int, len(p))
			copy(A, p)
			permutations = append(permutations, A)
		} else {
			for i := 0; i < n; i++ {
				generate(n-1, arr)
				idx := 0
				if n%2 == 0 {
					idx = i
				}
				arr[idx], arr[n-1] = arr[n-1], arr[idx]
			}
		}
	}
	generate(len(data), data)
	return permutations
}

heapPermutations([]int{1, 2, 3})
#+end_src
* DONE 58. Length of Last Word                                         :Easy:
CLOSED: [2021-07-10 Sat 18:09]
<2021-07-10 Sat>
https://leetcode.com/problems/length-of-last-word/

#+begin_src go
func lengthOfLastWord(s string) int {
    var length = 0
    var isTail = true
    for i := len(s)-1; i>=0; i-- {
        if s[i] == ' ' {
            if isTail {
                continue
            } else {
                break
            }
        }
        isTail = false
        length += 1
    }
    return length
}
#+end_src

* DONE 83. Remove Duplicates from Sorted List                          :Easy:
<2021-07-10 Sat>
https://leetcode.com/problems/remove-duplicates-from-sorted-list/

#+begin_src go
/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func deleteDuplicates(head *ListNode) *ListNode {
    if head == nil {
        return head
    }
    curr := head
    for curr.Next != nil {
        if curr.Val == curr.Next.Val {
            curr.Next = curr.Next.Next
        } else {
            curr = curr.Next
        }
    }
    return head
}
#+end_src

* DONE 88. Merge Sorted Array                                          :Easy:
CLOSED: [2021-07-11 Sun 13:25]
https://leetcode.com/problems/merge-sorted-array/

On <2021-07-10 Sat> I spent the evening trying to solve the problem with O(n+m) complexity without luck:
#+begin_src go
package main

import (
	"fmt"
)

func merge(nums1 []int, m int, nums2 []int, n int) {
	var i = 0 // index of left-most processed element in nums1
	var j = 0 // index of the smallest element in nums2
	var k = 0

	if n == 0 {
		return
	}
	var n1, n2 int
	log := func() {
		fmt.Printf("nums1: %v, nums2: %v, i=%d, j=%d, n1=%d, n2=%d, k=%d\n", nums1, nums2, i, j, n1, n2, k)
	}

	for i = 0; i < m; i++ {
		n1i, n2j, n2k = nums1[i], nums2[j], nums2[k]
		log()

		if n1i <= n2j && n1i <= n2k {
			continue
		}

		if n2j <= n1i && n2j <= n2k {
			nums1[i] = n2j
			nums2[j] = n1i

			if n1i > nums2[j+1] {
				j++
			}
			continue
		}

		if n2k <= n2j && n2k <= n1i {
			nums1[i] = n2k
			nums2[k] = n1i
			k++
			continue
		}
	}
	fmt.Println("second part")
	j = k
	k = 0
	for i = m; i < n+m; i++ {
		log()
		n2j, n2k = nums2[j], nums2[k]
		if n2j <= n2k {
			nums1[i] = n2j
			j++
		} else {
			nums1[i] = n2k
			k++
		}
	}
	fmt.Printf("%v\n", nums1)
}

func case1() {
	nums1 := []int{4, 5, 6, 0, 0, 0}
	nums2 := []int{1, 2, 3}
	merge(nums1, 3, nums2, 3)
}

func case2() {
	nums1 := []int{4, 0, 0, 0, 0, 0}
	nums2 := []int{1, 2, 3, 5, 6}
	merge(nums1, 1, nums2, 5)
}

func case3() {
	nums1 := []int{-1, 0, 0, 3, 3, 3, 0, 0, 0}
	nums2 := []int{1, 2, 2}
	merge(nums1, 6, nums2, 3)

}

func case4() {
	nums1 := []int{-1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0}
	nums2 := []int{-1, -1, 0, 0, 1, 2}
	merge(nums1, 5, nums2, 6)

}

func case5() {
	nums1 := []int{-10, -10, -9, -9, -9, -8, -8, -7, -7, -7, -6, -6, -6, -6, -6, -6, -6, -5, -5, -5, -4, -4, -4, -3, -3, -2, -2, -1, -1, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
	nums2 := []int{-10, -10, -9, -9, -9, -9, -8, -8, -8, -8, -8, -7, -7, -7, -7, -7, -7, -7, -7, -6, -6, -6, -6, -5, -5, -5, -5, -5, -4, -4, -4, -4, -4, -3, -3, -3, -2, -2, -2, -2, -2, -2, -2, -1, -1, -1, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9}
	merge(nums1, 55, nums2, 99)

}

func main() {
	fmt.Println("Hello, playground")
	case5()
}
#+end_src

Then on <2021-07-11 Sun> morning I checked how others do it (on
https://coderscat.com/) and the key idea is to start not from left to
right but from right to left, then the solution is trivial:

#+begin_src go

func merge(nums1 []int, m int, nums2 []int, n int) {
	var i = m-1 // index of nums1
	var j = n-1 // index of nums2

    for k:=m+n-1; k>=0; k-- {
        if i<0 {
            nums1[k]=nums2[j]
            j--
            continue
        }
        if j<0 {
            nums1[k]=nums1[i]
            i--
            continue
        }

        if nums1[i] > nums2[j] {
            nums1[k] = nums1[i]
            i--
            continue
        }

        nums1[k] = nums2[j]
        j--

    }
}
#+end_src
